package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"reflect"
	"text/template"
	"time"
)

func main() {
	fs := token.NewFileSet()
	file, err := parser.ParseFile(fs, os.Getenv("GOFILE"), nil, 0)
	if err != nil {
		fmt.Println("Can't parse file", err)
	}

	file.Name.Name = "bar"

	r := &Renamer{}
	ast.Walk(r, file)

	_ = packageTemplate.Execute(os.Stdout, struct {
		Timestamp time.Time
		Data      Renamer
	}{
		Timestamp: time.Now(),
		Data:      *r,
	})
}

type Renamer struct {
	Fields []string
	Tags   []string
}

func (r *Renamer) Visit(node ast.Node) (w ast.Visitor) {
	if node != nil {
		switch n := node.(type) {
		case *ast.TypeSpec:
			if n.Name.Name == os.Args[1] {
				decl := n.Type.(*ast.StructType)
				for _, f := range decl.Fields.List {
					r.Fields = append(r.Fields, f.Names[0].Name)
					r.Tags = append(r.Tags, reflect.StructTag(f.Tag.Value).Get("rpm"))
				}
			}
		}

	}
	return r
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package rpm


func NewPackage(line string) metadata. { 
	{{range $i, $field := .Data.Fields}}
		r.{{$field}} = fields[{{$i}}]
	{{end}}
}
`))
